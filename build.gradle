buildscript {
    repositories {
        jcenter()
        maven {
            url("https://plugins.gradle.org/m2/")
        }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

apply plugin: 'kotlin'
apply plugin: 'jacoco'

group = "dev.codewithdk.ktor.server.minimalist"
version = "0.0.1"

repositories {
    mavenCentral()
    jcenter()
}

subprojects {
    apply(plugin: 'org.jetbrains.kotlin.jvm')
    apply(plugin: 'org.jetbrains.kotlin.kapt')
    apply(plugin: 'jacoco')
    //apply(plugin: 'org.jlleitschuh.gradle.ktlint')

    sourceCompatibility = "11"
    targetCompatibility = "11"

    sourceSets {
        main.kotlin.srcDirs = main.java.srcDirs = ['src']
        test.kotlin.srcDirs = test.java.srcDirs = ['test']
        main.resources.srcDirs = ['resources']
        test.resources.srcDirs = ['testresources']
    }

    test {
        useJUnitPlatform()
        jacoco {
            destinationFile = file("${buildDir}/jacoco/test.exec")
        }
    }

    /*tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "11"
        }
    }*/

    /*ktlint {
        debug = true
        verbose = true
        outputToConsole = true
        outputColorName = "RED"
    }*/

    repositories {
        mavenCentral()
        mavenLocal()
        jcenter()
    }

    dependencies {
        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


        // Dagger
        implementation "com.google.dagger:dagger:$dagger_version"
        kapt "com.google.dagger:dagger-compiler:$dagger_version"

        // Testing
        testImplementation "io.kotest:kotest-runner-junit5-jvm:$kotest_version"
        testImplementation "io.kotest:kotest-assertions-core-jvm:$kotest_version"
        testImplementation "io.kotest:kotest-property-jvm:$kotest_version"
    }
}

// Code Coverage Report (Jacoco)
task codeCoverageReport(type: JacocoReport) {
    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}


//dependencies {
//    implementation("io.ktor:ktor-server-auth-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-core-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-locations-jvm:$ktor_version")
//    implementation("io.ktor:ktor-client-core-jvm:$ktor_version")
//    implementation("io.ktor:ktor-client-apache-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-compression-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-cors-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-call-logging-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-call-id-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-metrics-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-content-negotiation-jvm:$ktor_version")
//    implementation("io.ktor:ktor-serialization-kotlinx-json-jvm:$ktor_version")
//    implementation("io.ktor:ktor-server-netty-jvm:$ktor_version")
//    implementation("ch.qos.logback:logback-classic:$logback_version")
//    testImplementation("io.ktor:ktor-server-tests-jvm:$ktor_version")
//    testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
//}